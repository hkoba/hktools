#!/bin/sh
# -*- mode: tcl; coding: utf-8 -*-
# the next line restarts using tclsh \
    exec wish -encoding utf-8 "$0" ${1+"$@"}

package require Tcl 8.5
package require BWidget
package require snit

snit::widget text-nowrap {
    
    component myText -inherit yes
    component mySearch

    option -selection no
    option -encoding utf-8

    constructor args {

	$self configurelist $args

	pack [set sw [ScrolledWindow $win.sw]] -fill both -expand yes

	install myText using text $sw.text -wrap none
        
	$sw setwidget $myText

        install mySearch using entry $win.search
        
        pack $mySearch -fill x -expand yes -side top
        
        $self interactive
    }
    
    typevariable ourTags -array [list search-match search-match]

    method interactive {} {
        bind $mySearch <Return> [list $self Search]
        $myText tag configure $ourTags(search-match) \
            -background palegreen
        
    }
    
    method Search {{text ""}} {
        if {$text eq ""} {
            set text [$mySearch get]
        }
        if {[set found [$myText search -count len $text insert]] ne ""} {
            $myText see $found
            set end "$found+${len}chars"
            $myText mark set insert $end
            $myText tag remove $ourTags(search-match) 1.0 end
            $myText tag add $ourTags(search-match) $found $end
        }
    }
    
}

namespace eval text-nowrap {

    proc public {kind name args} {
	$kind $name {*}$args
	namespace export $name
    }

    public proc read_file {fn args} {
	if {$fn eq "-"} {
	    set fh stdin
	} else {
	    set fh [open $fn]
	}
	if {$args ne ""} {
	    fconfigure $fh {*}$args
	}
	set data [read $fh]
	close $fh
	set data
    }
    
    #========================================
    # 制限付きの、 posix long option parser.
    public proc posix-getopt {argVar {dict ""} {shortcut ""}} {
	upvar 1 $argVar args
	set result {}
	while {[llength $args]} {
	    if {![regexp ^- [lindex $args 0]]} break
	    if {[lindex $args 0] eq "-"} break; # skip "-"
	    set args [lassign $args opt]
	    if {$opt eq "--"} break
	    if {[regexp {^-(-no)?(-\w[\w\-]*)(=(.*))?} $opt \
		     -> no name eq value]} {
		if {$no ne ""} {
		    set value no
		} elseif {$eq eq ""} {
		    set value [expr {1}]
		}
	    } elseif {[dict exists $shortcut $opt]} {
		set name [dict get $shortcut $opt]
		set value [expr {1}]
	    } else {
		error "Can't parse option! $opt"
	    }
	    lappend result $name $value
	    if {[dict exists $dict $name]} {
		dict unset dict $name
	    }
	}
	list {*}$dict {*}$result
    }
}

if {![info level] && [info script] eq $::argv0} {

    namespace import text-nowrap::*
    
    apply {{} {
	
	pack [text-nowrap .win {*}[posix-getopt ::argv]] \
	    -fill both -expand yes
    
	.win insert end [if {$::argv ne ""} {

	    read_file [lindex $::argv 0] -encoding [.win cget -encoding]

	} else {
	    if {[.win cget -selection]
		|| [set data [selection get -selection CLIPBOARD]] eq ""} {
		selection get
	    } else {
		set data
	    }
	}]
    }}
}
